// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  uid                String               @unique @default(cuid())
  full_name          String               @db.VarChar(100)
  email_address      String               @unique @db.VarChar(200)
  password           String               @db.VarChar(4096)
  gender             String               @db.VarChar(30)
  dob                DateTime             @db.Date()
  created_at         DateTime             @default(now())
  last_modified_at   DateTime             @updatedAt
  userRole           UserRole[]
  Payment            Payment[]
  Sale               Sale[]
  StockItem          StockItem[]
  CategoryExtraValue CategoryExtraValue[]
  CategoryExtra      CategoryExtra[]
  Category           Category[]
  Refund             Refund[]
}

model UserAccessToken {
  id                 Int      @id @default(autoincrement())
  uid                String   @unique @default(cuid())
  access_token       String   @db.VarChar(100)
  expires_in_minutes Int
  created_at         DateTime @default(now())
  // relations
  user_uid           String // User.uid
}

model Role {
  id               Int              @id @default(autoincrement())
  uid              String           @unique @default(cuid())
  title            String           @db.VarChar(200)
  description      String           @unique @db.VarChar(300)
  created_at       DateTime         @default(now())
  last_modified_at DateTime         @updatedAt
  //relations
  userRoles        UserRole[]
  rolePermissions  RolePermission[]
}

model Permission {
  id               Int              @id @default(autoincrement())
  uid              String           @unique @default(cuid())
  title            String           @db.VarChar(200)
  description      String           @unique @db.VarChar(300)
  created_at       DateTime         @default(now())
  last_modified_at DateTime         @updatedAt
  user_id          Int
  //relations
  RolePermission   RolePermission[]
}

model UserRole {
  id      Int    @id @default(autoincrement())
  uid     String @unique @default(cuid())
  user_id String
  role_id String

  //relations
  user User @relation(fields: [user_id], references: [uid])
  role Role @relation(fields: [role_id], references: [uid])
}

model RolePermission {
  id             Int    @id @default(autoincrement())
  uid            String @unique @default(cuid())
  role_uid       String
  permission_uid String

  //relationship
  role       Role       @relation(fields: [role_uid], references: [uid])
  permission Permission @relation(fields: [permission_uid], references: [uid])
}

model Category {
  id  Int    @unique @default(autoincrement())
  uid String @unique @default(cuid())

  title            String   @db.VarChar(200)
  description      String   @unique @db.VarChar(300)
  created_at       DateTime @default(now())
  last_modified_at DateTime @updatedAt

  user_uid           String
  //relationships
  createBy           User                 @relation(fields: [user_uid], references: [uid])
  CategoryExtra      CategoryExtra[]
  CategoryExtraValue CategoryExtraValue[]
  StockItem          StockItem[]
}

model CategoryExtra {
  id  Int    @unique @default(autoincrement())
  uid String @unique @default(cuid())

  title            String   @db.VarChar(200)
  data_type        String   @db.VarChar(50)
  is_required      Boolean  @default(true)
  created_at       DateTime @default(now())
  last_modified_at DateTime @updatedAt

  category_uid       String
  user_uid           String
  //relationships
  createBy           User                 @relation(fields: [user_uid], references: [uid])
  catagory           Category             @relation(fields: [category_uid], references: [uid])
  CategoryExtraValue CategoryExtraValue[]
}

model CategoryExtraValue {
  id  Int    @unique @default(autoincrement())
  uid String @unique @default(cuid())

  value            String   @db.VarChar(230)
  created_at       DateTime @default(now())
  last_modified_at DateTime @updatedAt

  extra_uid    String
  user_uid     String
  category_uid String?

  //relationships
  createBy User          @relation(fields: [user_uid], references: [uid])
  extra    CategoryExtra @relation(fields: [extra_uid], references: [uid])
  Category Category?     @relation(fields: [category_uid], references: [uid])
}

model StockItem {
  id          Int    @unique @default(autoincrement())
  uid         String @unique @default(cuid())
  name        String @db.VarChar(150)
  quantity    Int
  unit_price  Int
  total_price Int?

  supplier_name    String? @db.VarChar(150)
  supplier_contact String? @db.VarChar(50)
  supplier_email   String? @db.VarChar(50)

  image_url     String? @db.VarChar(200)
  item_location String? @db.VarChar(100)
  barcode       String  @db.Text
  status        String

  date_acquired    DateTime?
  expiry_date      DateTime
  created_at       DateTime  @default(now())
  last_modified_at DateTime  @updatedAt

  category_uid String
  user_uid     String

  //relationship
  category Category  @relation(fields: [category_uid], references: [uid])
  createBy User      @relation(fields: [user_uid], references: [uid])
  Payment  Payment[]
  Sale     Sale[]
}

model Sale {
  id               Int        @unique @default(autoincrement())
  uid              String     @unique @default(cuid())
  quantity         Int
  unit_price       Int
  total_price      Int
  buyer            String?
  discount         Int?
  status           SaleStatus
  created_at       DateTime   @default(now())
  last_modified_at DateTime   @updatedAt

  item_uid   String
  seller_uid String

  //relationships
  saller User      @relation(fields: [seller_uid], references: [uid])
  item   StockItem @relation(fields: [item_uid], references: [uid])
  Refund Refund[]
}

model Payment {
  id  Int    @id @unique @default(autoincrement())
  uid String @unique @default(cuid())

  method           PaymentMethod @default(CASH)
  payment_date     DateTime      @default(now())
  status           PaymentStatus @default(PENDING)
  created_at       DateTime      @default(now())
  last_modified_at DateTime      @updatedAt

  sale_uid   String
  saller_uid String
  user_uid   String

  sale   StockItem @relation(fields: [sale_uid], references: [uid])
  saller User      @relation(fields: [saller_uid], references: [uid])
}

model Refund {
  id  Int    @id @unique @default(autoincrement())
  uid String @unique @default(cuid())

  created_at       DateTime     @default(now())
  last_modified_at DateTime     @updatedAt
  reason           String       @db.VarChar(300)
  status           RefundStatus @default(APPROVED)
  sale_uid         String
  created_by       String

  sale      Sale @relation(fields: [sale_uid], references: [uid])
  createdBy User @relation(fields: [created_by], references: [uid])
}

//Enums

enum SaleStatus {
  SOLD
  REFUND
  EXPIRED
}

enum RefundStatus {
  APPROVED
  CANCELED
}

enum PaymentMethod {
  CASH
  POS
  TRANSFER
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  PARTIAL
}
